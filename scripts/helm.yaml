global:
  domain: ${taito_domain}
  url: https://${taito_domain}
  publicPort: 443
  logProvider: ${taito_logging_provider}
  logFormat: ${taito_logging_format}
  logLevel: info    # trace, debug, info, warn, error, fatal
  registry: ${taito_container_registry}
  imagePullPolicy: ''
  debug: false

full-stack:
  serviceAccountCreate: true
  networkPolicyEnabled: false
  podSecurityPolicyCreate: false

  persistence:
    enabled: false
    existingClaim:
    storageClass:
    # NOTE: Google does not support ReadWriteMany
    # ReadWriteOnce -> all containers will be placed on the same Kubernetes node
    accessMode: ReadWriteOnce
    size: 8Gi

  ingress:
    class: nginx
    oldRewritePolicy: true
    tls: true
    domains:
      - name: ${taito_domain}
        altDomains:
          - name: ${taito_altdomain}

  serviceDefaults:
    # Basics
    image: # For 3rd party container image
    command:
    port: 8080
    tier:
    livenessPath: /healthz
    livenessInitialDelay: 3
    # Paths
    paths:
      # - path:
      #   basicAuthEnabled:
      #   basicAuthHtpasswdSecret:
      #   clientMaxBodySize:
      #   bufferSize:
      #   requestBuffering:
      #   connectTimeout:
      #   sendTimeout:
      #   readTimeout:
      #   nextUpstreamTimeout:
      #   limitRate:
      #   limitRateAfter:
      #   rewriteTarget:
      #   rewriteTargetDisabled:
    # Path defaults
    basicAuthEnabled: ${taito_basic_auth_enabled}
    basicAuthHtpasswdSecret: ${taito_project}-${taito_env}-basic-auth
    # clientMaxBodySize: 1m
    # bufferSize: 4k
    # requestBuffering: on
    # connectTimeout: 5
    # sendTimeout: 60
    # readTimeout: 60
    # nextUpstreamTimeout: 0
    limitRate:
    limitRateAfter:
    rewriteTarget:
    rewriteTargetDisabled:
    # Security
    runAsUser:
    runAsGroup:
    # Resources
    cpuRequest: 2m
    cpuLimit: 100m
    memoryRequest: 50Mi
    memoryLimit: 256Mi
    # Scaling
    replicas: ${kubernetes_replicas}
    autoscale: false
    minReplicas: ${kubernetes_replicas}
    maxReplicas: 5
    # TODO metrics:
    # https://kubernetes.io/docs/tasks/run-application/horizontal-pod-autoscale-walkthrough/
    # TODO vertical autoscaling:
    # https://cloud.google.com/kubernetes-engine/docs/how-to/vertical-pod-autoscaling
    # Sidecar
    sidecar:
    # Mounts
    temporaryVolumeMounts:
      # - mountPath: /mnt/data
      #   volumePath: data
      #   readOnly: false
    persistentVolumeMounts:
      # - mountPath: /mnt/data
      #   volumePath: data
      #   readOnly: false
    # Env
    secrets:
      # Secrets as mounted files
    secretEnv:
      # Secrets as environment variables (not recommended)
    env:
      # Environment variables
      COMMON_ENV: ${taito_env}

  services:

    client:
      paths:
        - path:
      tier: frontend
      cpuRequest: 2m
      memoryRequest: 2Mi

    # TODO: proper setup for Kafka
    # TODO: proper setup for Zookeeper
    server:
      paths:
        - path: /api
      tier: backend
      livenessInitialDelay: 120
      db:
        useProxy: true
        instance: ${taito_zone}:${taito_provider_region}:${db_database_instance}
        port: 5432
        proxySecret: ${taito_provider_db_proxy_secret}
      serviceAccount:
        secret: ${taito_provider_service_account_secret}
      secrets:
        DATABASE_PASSWORD: ${db_database_app_secret}
        S3_KEY_SECRET: ${taito_project}-${taito_env}-storage-gateway.secret
      env:
        SENTRY_DSN: #sentryDSN
        API_PORT: '8080'
        API_BINDADDR: '0.0.0.0'
        DATABASE_HOST: '${db_database_real_host}'
        DATABASE_PORT: '${db_database_real_port}'
        DATABASE_NAME: ${db_database_name}
        DATABASE_USER: ${db_database_app_username}
        DATABASE_POOL_MIN: '5'
        DATABASE_POOL_MAX: '10'
        S3_URL: http://${taito_project}-${taito_env}-storage:9000/
        S3_REGION: ${taito_provider_region}
        S3_BUCKET: ${taito_random_name}-${taito_env}
        S3_KEY_ID: 070UEOQR6LX4YPZLFU0V
        S3_FORCE_PATH_STYLE: 'true'
      # cron jobs that re-use the same Docker image and settings as server
      # cronJobs:
      #   - name: examplejob1
      #     schedule: "30 2 * * *"
      #     args:
      #       - /bin/sh
      #       - -c
      #       - date; echo Hello from server

    storage:
      image: minio/minio:RELEASE.2019-03-27T22-35-21Z
      port: 9000
      tier: backend
      livenessPath: /minio/health/ready
      memoryRequest: 20Mi
      runAsUser: 2
      runAsGroup: 2
      command:
        - minio
        - gateway
        - gcs
        - ${taito_resource_namespace}
      serviceAccount:
        secret: ${taito_provider_service_account_secret}
      secretEnv:
        # Minio requires secret as environment variable in gateway mode
        MINIO_SECRET_KEY: ${taito_project}-${taito_env}-storage-gateway.secret
      env:
        MINIO_ACCESS_KEY: 070UEOQR6LX4YPZLFU0V
        MINIO_CONFIG_DIR: /tmp

    scheduler:
      enabled: false
      type: job
      image: buildpack-deps:curl
      cpuRequest: 1m
      memoryRequest: 1Mi
      runAsUser: 2
      runAsGroup: 2
      secretEnv:
        SCHEDULER_SECRET: ${taito_project}-${taito_env}-scheduler.secret
      cronJobs:
        - name: examplejob2
          schedule: "0 2 * * *"
          args:
            - /bin/sh
            - -c
            - curl -sS -H "X-Secret:$(cat $SCHEDULER_SECRET)" http://${taito_project}-${taito_env}-server:8080/posts?offset=0&limit=1

    # TODO: https://kubernetes.io/docs/concepts/workloads/controllers/jobs-run-to-completion/#ttl-mechanism-for-finished-jobs
